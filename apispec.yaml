openapi: 3.0.0
info:
  description: "This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters."
  version: 1.0.2
  title: Pegacorn Communicate Fhirview
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: media gallery
    description: Everything about media gallery
  - name: media room
    description: Everything about media room
  - name: mediatagging
    description: Everything about media tagging
  - name: roles
    description: Everything about user roles
  - name: practitioners
    description: Everything about Practitioner's 
  - name: services
    description: Everything about services
  - name: favorites
    description: Everything about favorites
  - name: calls
    description: Everything about calls
paths:

  /mediaGallery:
    post:
      tags:
        - mediaGallery
      summary: create a room for each practitioner and populate the message history with their media
      description: "seed the data for new practitioner"
      operationId: seedmediaroom
      requestBody:
        $ref: "#/components/requestBodies/Patient"
      responses:
        "405":
          description: Invalid input
  /mediaRoom/{PractitionerId}:
    get:
      tags:
        - mediaRoom
      summary: Finds media rooms  by practitionerId
      description: Multiple status values can be provided with comma separated strings
      operationId: findMediaRoomsByPractitioner
      parameters:
        - name: PractitionerId
          in: path
          description: ID of practitioner who's media room needs to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MediaRoom"
            application/json:
              schema:
                $ref: "#/components/schemas/MediaRoom"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found
  /Roles/{PractitionerId}:
    get:
      tags:
        - roles
      summary: Finds media rooms  by practitionerId
      description: Multiple status values can be provided with comma separated strings
      operationId: findRolesByPractitioner
      parameters:
        - name: PractitionerId
          in: path
          description: ID of practitioner who's media room needs to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MediaRoom"
            application/json:
              schema:
                $ref: "#/components/schemas/MediaRoom"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found        
  /Roles/{RoleId}:
    get:
      tags:
        - roles
      summary: Finds Role by RoleId
      description: Multiple status values can be provided with comma separated strings
      operationId: findRoleByRoleId
      parameters:
        - name: RoleId
          in: path
          description: ID of Role who's Role  needs to be found
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Role"
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found        
  /Roles/{Text}:
    get:
      tags:
        - roles
      summary: Find role by text
      description: Perform text based query on role
      operationId: findRoleByText
      parameters:
        - name: Text
          in: path
          description: ID of practitioner who's media room needs to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MediaRoom"
            application/json:
              schema:
                $ref: "#/components/schemas/MediaRoom"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found        
  /Roles/GetAllExtant:
    get:
      tags:
        - roles
      summary: Finds all extant roles    
      description:  Finds all extant roles
      operationId: findRoleByStatusExtant
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Role"
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: Role not found        
  /Roles/findAllUnfilled:
    get:
      tags:
        - roles
      summary: List all unfilled roles
      description: List all unfilled roles
      operationId: findRolesbyStatusUnfilled
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Role"
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: Roles not found        
  /Practitioner/{RoleId}:
    get:
      tags:
        - practitioner
      summary: Finds List of practitioner by RoleId
      description: Finds List of practitioner by assigned RoleId 
      operationId: findPractitionerByRoleId
      parameters:
        - name: RoleId
          in: path
          description: Role Id of Practitioner 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MediaRoom"
            application/json:
              schema:
                $ref: "#/components/schemas/MediaRoom"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found        
  /Practitioner/{MatrixId}:
    get:
      tags:
        - practitioner
      summary: return domain specific data about the practitioner, given their matrix id
      description: API needs to exists that will return domain specific data about the practitioner, given their matrix id
      operationId: findPractitionerByMatrixId
      parameters:
        - name: MatrixId
          in: path
          description: MatrixID of practitioner who's PractitionerObject needs to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Practitioner"
            application/json:
              schema:
                $ref: "#/components/schemas/Practitioner"
        "400":
          description: Invalid ID supplied
        "404":
          description: Practitioner not found        
  /Practitioner/{Text}:
    get:
      tags:
        - practitioner
      summary: text based practitioner query 
      description: Multiple status values can be provided with comma separated strings
      operationId: finPractitionerByText
      parameters:
        - name: Text
          in: path
          description: text of practitioner 
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Practitioner"
            application/json:
              schema:
                $ref: "#/components/schemas/Practitioner"
        "400":
          description: Invalid ID supplied
        "404":
          description: Practitioner not found        
  /Practitioner:
    get:
      tags:
        - practitioner
      summary: get all Practitioners 
      description: Multiple status values can be provided with comma separated strings
      operationId: findAllPractitioners
      parameters:
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Practitioner"
            application/json:
              schema:
                $ref: "#/components/schemas/Practitioner"
        "404":
          description: Practitioner not found        
  /Service/GetAll:
    get:
      tags:
        - service
      summary: get all Services 
      description: An API needs to exist that will return a list of services
      operationId: findsAllServices
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Service"
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          description: Invalid ID supplied
        "404":
          description: Service not found        
  /Service/{Text}:
    get:
      tags:
        - service
      summary: get Services by text
      description: An API needs to exist that will perform a text based query on the list of services.
      operationId: findServiceByText
      parameters:
        - name: Text
          in: path
          description: text based query on the list of services
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Service"
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          description: Invalid ID supplied
        "404":
          description: Service not found        

  /Favourites/{PractitionerId}:
    get:
      tags:
        - favourites
      summary: get Services by text
      description: An API needs to exist that will perform a text based query on the list of services.
      operationId: findFavouritesByPractitionerId
      parameters:
        - name: PractitionerId
          in: path
          description: ID of practitioner who's media room needs to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Call"
            application/json:
              schema:
                $ref: "#/components/schemas/Call"
        "400":
          description: Invalid ID supplied
        "404":
          description: Favourites not found 
  /Favourites/updateByPractitionerIdDirectoryId:
    post:
      tags:
        - favourites
      summary: update favourite status by practitionerid for a directory cateory
      description: update favourite status by practitionerid for a directory cateory
      operationId: updateByPractitionerIdDirectoryId
      parameters:
        - name: PractitionerId
          in: path
          description: ID of practitioner 
          required: true
          schema:
            type: integer
            format: int64
        - name: DirectoryId
          in: path
          description: ID of Directory category 
          required: true
          schema:
            type: integer
            format: int64            
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MediaRoom"
            application/json:
              schema:
                $ref: "#/components/schemas/MediaRoom"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found           
  /Calls/{PractitionerId}:
    get:
      tags:
        - calls
      summary: get all calls made recently by practitionerId 
      description: An API needs to exist that will get all calls made recently by practitionerId .
      operationId: GetRecentCallsByPractitionerId
      parameters:
        - name: PractitionerId
          in: path
          description: ID of practitioner who's media room needs to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Call"
            application/json:
              schema:
                $ref: "#/components/schemas/Call"
        "400":
          description: Invalid ID supplied
        "404":
          description: Media Room not found 

servers:
  - url: https://pagacorn-communicate-fhirview.swagger.io/v2
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Practitioner"
      description: List of user object
      required: true
    Patient:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Patient"
        application/xml:
          schema:
            $ref: "#/components/schemas/Patient"
      description: Pet object that needs to be added to the store
      required: true
  schemas:
    MediaRoom:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          format: string     
      xml:
        name: MediaRoom  
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          format: string
        captureDate:
          type: string
          format: date-time
        taggingPractitioner:
          type: string
          format: date-time
        taggedPatientId:
          type: integer
          format: int64
      xml:
        name: Tag
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dateOfBirth:
          type: string
          format: date-time
        urn:
          type: string
          format: string
        fullName:
          type: string
          format: string
      xml:
        name: Patient        
    Practitioner:
      type: object
      properties:
        id:
          type: integer
          format: int64
        mxUser:
          type: string
          format: string
        mxUserDisplayName:
          type: string
          format: string          
        jobTitle:
          type: string
          format: string                    
        emailAddress:
          type: string
          format: string                    
        phoneNumber:
          type: string
          format: string                    
      xml:
        name: Practitioner        
    Service:
      type: object
      properties:
        id:
          type: integer
          format: int64
        location:
          type: string
          format: string          
        name:
          type: string
          format: string          
        phoneNumber:
          type: string
          format: string                    
      xml:
        name: Service        
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
      xml:
        name: Role        
    Call:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: integer
          format: int64
        direction:
          type: integer
          enum:
            - left
            - right
            - up
            - down
        timestamp:
          type: string
          format: date-time
        length:
          type: integer
          format: int64
      xml:
        name: Call        
    ExtraCallInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        payload:
          type: string
          format: string
        pickedBy:
          type: integer
          format: int32
          description: Picked by Practitioner Name
        destination:
          type: string
          format: string
          description: destination 
      xml:
        name: ExtraCallInfo        
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
